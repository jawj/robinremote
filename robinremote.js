// Generated by CoffeeScript 1.3.1
(function() {
  var body, button, cmd, load, obeyMouseEvents, releaseEvents, rocker, tag, touchEvents,
    __hasProp = {}.hasOwnProperty;

  tag = function(opts) {
    var k, t, v, _ref;
    t = document.createElement((_ref = opts.name) != null ? _ref : 'div');
    for (k in opts) {
      if (!__hasProp.call(opts, k)) continue;
      v = opts[k];
      switch (k) {
        case 'name':
          continue;
        case 'parent':
          v.appendChild(t);
          break;
        case 'prevSibling':
          v.parentNode.insertBefore(t, v.nextSibling);
          break;
        case 'text':
          t.appendChild(document.createTextNode(v));
          break;
        default:
          t[k] = v;
      }
    }
    return t;
  };

  load = function(opts, callback) {
    var k, kvps, url, v, xhr;
    url = opts.url;
    if (opts.method == null) {
      opts.method = 'GET';
    }
    if (opts.search != null) {
      kvps = (function() {
        var _ref, _results;
        _ref = opts.search;
        _results = [];
        for (k in _ref) {
          if (!__hasProp.call(_ref, k)) continue;
          v = _ref[k];
          _results.push("" + (escape(k)) + "=" + (escape(v)));
        }
        return _results;
      })();
      url += '?' + kvps.join('&');
    }
    xhr = new XMLHttpRequest();
    xhr.onreadystatechange = function() {
      var obj;
      if (xhr.readyState === 4) {
        obj = opts.type === 'json' ? JSON.parse(xhr.responseText) : opts.type === 'xml' ? xhr.responseXML : xhr.responseText;
        return typeof callback === "function" ? callback(obj) : void 0;
      }
    };
    xhr.open(opts.method, url, true);
    return xhr.send(opts.data);
  };

  cmd = function(command) {
    return load({
      url: 'http://gravity.shrtct.com/' + command
    });
  };

  touchEvents = ['mousedown', 'touchstart'];

  releaseEvents = ['mouseup', 'touchend'];

  obeyMouseEvents = true;

  rocker = function(parent, downFunc, upFunc) {
    var down, downTouchLstn, e, outer, releaseLstn, up, upTouchLstn, _i, _j, _k, _len, _len1, _len2;
    outer = tag({
      className: 'rocker',
      parent: parent
    });
    tag({
      className: 'shadow-hider',
      parent: outer
    });
    tag({
      className: 'divider',
      parent: outer
    });
    down = tag({
      parent: outer
    });
    tag({
      className: 'minus',
      parent: down
    });
    up = tag({
      parent: outer
    });
    tag({
      className: 'plus-h',
      parent: up
    });
    tag({
      className: 'plus-v',
      parent: up
    });
    downTouchLstn = function(e) {
      if (e.type === 'touchstart') {
        obeyMouseEvents = false;
      }
      if (!(e.type === 'touchstart' || obeyMouseEvents)) {
        return;
      }
      down.className += ' highlighted';
      return downFunc();
    };
    for (_i = 0, _len = touchEvents.length; _i < _len; _i++) {
      e = touchEvents[_i];
      down.addEventListener(e, downTouchLstn);
    }
    upTouchLstn = function(e) {
      if (e.type === 'touchstart') {
        obeyMouseEvents = false;
      }
      if (!(e.type === 'touchstart' || obeyMouseEvents)) {
        return;
      }
      up.className += ' highlighted';
      return upFunc();
    };
    for (_j = 0, _len1 = touchEvents.length; _j < _len1; _j++) {
      e = touchEvents[_j];
      up.addEventListener(e, upTouchLstn);
    }
    releaseLstn = function(e) {
      up.className = 'up';
      return down.className = 'down';
    };
    for (_k = 0, _len2 = releaseEvents.length; _k < _len2; _k++) {
      e = releaseEvents[_k];
      document.addEventListener(e, releaseLstn);
    }
    return releaseLstn();
  };

  button = function(parent, func) {
    var btn, e, releaseLstn, touchLstn, _i, _j, _len, _len1;
    btn = tag({
      parent: parent,
      text: ' '
    });
    touchLstn = function(e) {
      if (e.type === 'touchstart') {
        obeyMouseEvents = false;
      }
      if (!(e.type === 'touchstart' || obeyMouseEvents)) {
        return;
      }
      btn.className += ' highlighted';
      return func();
    };
    for (_i = 0, _len = touchEvents.length; _i < _len; _i++) {
      e = touchEvents[_i];
      btn.addEventListener(e, touchLstn);
    }
    releaseLstn = function(e) {
      return btn.className = 'button';
    };
    for (_j = 0, _len1 = releaseEvents.length; _j < _len1; _j++) {
      e = releaseEvents[_j];
      document.addEventListener(e, releaseLstn);
    }
    return releaseLstn();
  };

  body = document.getElementsByTagName('body')[0];

  rocker(body, (function() {
    return cmd('a-down');
  }), (function() {
    return cmd('a-up');
  }));

  tag({
    className: 'label',
    parent: body,
    text: 'Agent'
  });

  rocker(body, (function() {
    return cmd('n-down');
  }), (function() {
    return cmd('n-up');
  }));

  tag({
    className: 'label',
    parent: body,
    text: 'Network'
  });

  rocker(body, (function() {
    return cmd('g-down');
  }), (function() {
    return cmd('g-up');
  }));

  tag({
    className: 'label',
    parent: body,
    text: 'Goal'
  });

  button(body, (function() {
    return cmd('reset');
  }));

  tag({
    className: 'label',
    parent: body,
    text: 'Reset'
  });

}).call(this);
